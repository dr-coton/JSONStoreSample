/// <reference types="node" />
import { NAME as FS_NAME } from "./fs-impl/fs";
import { WriteFile, WriteFileAtomic } from "./fs-write-model";
import { TODO } from "./types";
import fs from "fs";
export interface Store<E extends StoreEntity> extends StoreOptions<E> {
    clone(opts?: Partial<StoreOptions<E>>): Store<E>;
    readable(): Promise<boolean>;
    readExisting(options?: {
        adapter?: StoreAdapter;
    }): Promise<E>;
    read(options?: {
        adapter?: StoreAdapter;
    }): Promise<E | null>;
    write(data: E, options?: {
        readAdapter?: StoreAdapter;
    }): Promise<E>;
    validate(data: E, messagePrefix?: string): Promise<void>;
    remove(): Promise<void>;
}
export interface VersionedStoreEntity {
    readonly _rev: number;
}
export interface StoreEntity extends Partial<VersionedStoreEntity> {
}
export interface StoreOptionsBase<E extends StoreEntity> {
    readonly file: string;
    readonly adapter?: StoreAdapter;
    readonly optimisticLocking?: boolean;
    readonly validators?: Array<StoreValidator<E>>;
    readonly lockfilePathResolver?: (file: string) => string;
    readonly lockfileRealpath?: boolean;
}
export declare type StoreOptions<E extends StoreEntity> = StoreOptionsBase<E> & {
    readonly fs: StoreFs;
};
export declare type StoreOptionsInput<E extends StoreEntity> = StoreOptionsBase<E> & {
    readonly fs?: StoreFs;
    readonly serialize?: (data: E) => Uint8Array | Buffer;
    readonly deserialize?: (data: Uint8Array | Buffer) => E;
};
export interface StoreAdapter {
    write(data: Buffer): Promise<Buffer>;
    read(data: Buffer): Promise<Buffer>;
}
export declare type StoreValidator<E extends StoreEntity> = (data: E) => Promise<string | null>;
declare const storeFsMethods: Readonly<{
    chmod: typeof fs.chmod.__promisify__;
    chown: typeof fs.chown.__promisify__;
    close: typeof fs.close.__promisify__;
    fsync: typeof fs.fsync.__promisify__;
    mkdir: typeof fs.mkdir.__promisify__;
    open: typeof fs.open.__promisify__;
    readFile: typeof fs.readFile.__promisify__;
    realpath: typeof fs.realpath.__promisify__;
    rename: typeof fs.rename.__promisify__;
    stat: typeof fs.stat.__promisify__;
    unlink: typeof fs.unlink.__promisify__;
    writeFile: typeof fs.writeFile.__promisify__;
}>;
export declare type StoreFsReference = typeof storeFsMethods & WriteFile;
export declare type StoreFs = StoreFsReference & WriteFileAtomic & {
    _impl: TODO;
} & {
    _name: typeof FS_NAME | string;
};
export {};
